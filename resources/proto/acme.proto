// resources\proto\AllInOne.proto - achme
syntax = "proto3";

package A0S_proto;

message PbSdlRect { int32 x = 1; int32 y = 2; int32 w = 3; int32 h = 5; }
message PbSdlPoint { int32 x = 1; int32 y = 2; }

enum PbSpriteType
{
	ST_TANK_A = 0;
	ST_TANK_B = 1;
	ST_TANK_C = 2;
	ST_TANK_D = 3;
	
	ST_PLAYER_1 = 4;
	ST_PLAYER_2 = 5;
	
	ST_BRICK_WALL = 6;
	ST_STONE_WALL = 7;
	ST_WATER = 8;
	ST_BUSH = 9;
	ST_ICE = 10;
	
	ST_BONUS_GRENADE = 11;
	ST_BONUS_HELMET = 12;
	ST_BONUS_CLOCK = 13;
	ST_BONUS_SHOVEL = 14;
	ST_BONUS_TANK = 15;
	ST_BONUS_STAR = 16;
	ST_BONUS_GUN = 17;
	ST_BONUS_BOAT = 18;
	
	ST_SHIELD = 19;
	ST_CREATE = 20;
	ST_DESTROY_TANK = 21;
	ST_DESTROY_BULLET = 22;
	ST_BOAT_P1 = 23;
	ST_BOAT_P2 = 24;
	
	ST_EAGLE = 25;
	ST_DESTROY_EAGLE = 26;
	ST_FLAG = 27;
	
	ST_BULLET = 28;
	
	ST_LEFT_ENEMY = 29;
	ST_STAGE_STATUS = 30;
	
	ST_TANKS_LOGO = 31;
	
	ST_NONE = 32;
}

enum PbTankStateFlag
{
	TSF_DEFAULT = 0; //empty value
	TSF_SHIELD = 1; //after taking the helmet
	TSF_FROZEN = 2; //after the opponent takes the clock
	TSF_DESTROYED = 3; //after taking a bomb from an opponent or being hit by a bullet
	TSF_BOAT = 4; //after taking the boat, allows you to cross the water
	TSF_BONUS = 5; //after hitting this tank, a bonus will appear on the map
	TSF_ON_ICE = 6; //if the tank is on ice, it slides
	TSF_CREATE = 7; //create a tank
	TSF_LIFE = 8;
	TSF_MENU = 9; //speeds up the animation twice
};

enum PbDirection
{
    D_UP = 0;
    D_RIGHT = 1;
    D_DOWN = 2;
    D_LEFT = 3;
};

message PbObject {
    /**
     * Display time of the current animation frame.
     */
    uint32 frame_display_time = 1;
    /**
     * Number of the current animation frame.
     */
    int32 current_frame = 2;
    /**
     * The variable says whether the object should be deleted. If change is equal to @a true, no updating and drawing of the object is skipped.
     */
    bool to_erase = 3;
    /**
     * Collision rectangle; may be smaller than the dimensions of dest_rect.
     */
    PbSdlRect collision_rect = 4;
    /**
     * The target position of the object on the screen.
     */
    PbSdlRect dest_rect = 5;
    /**
     * Position on the texture of the currently displayed frame.
     */
    PbSdlRect src_rect = 6;
    /**
     * PbObject type.
     */
    PbSpriteType type = 7;
    /**
     * Accurate horizontal position of the object.
     */
    double pos_x = 8;
    /**
     * Accurate vertical position of the object.
     */
    double pos_y = 9;
}

message PbBullet {
	PbObject object = 1;
    /**
     * Projectile speed.
     */
    double speed = 2;
    /**
     * The variable stores information whether the bullet collided with something.
     */
    bool collide = 3;
    /**
     * The variable stores information whether the bullet has increased damage.
     * Increased damage allows you to destroy stone walls and bushes.
     */
    bool increased_damage = 4;
    /**
     * The direction of the bullet's movement.
     */
    PbDirection direction = 5;
}

message PbBonus {
	PbObject object = 1;
    /**
     * Time since bonus creation.
     */
    uint32 bonus_show_time = 2;
    /**
     * Variable storing information about whether the bonus is currently displayed; used for flashing.
     */
    bool show = 3;
}

message PbBrick {
	PbObject object = 1;
	/**
     * Number of times the bullets hit the wall.
     */
    int32 collision_count = 2;
    /**
     * One of the ten states in which a wall can be.
     */
    int32 state_code = 3;
}

message PbTank {
	PbObject object = 1;
	/**
	 * Flags that the tank currently has.
	 */
	PbTankStateFlag flags = 2;
	/**
	 * Time since slippage occurred.
	 */
	sint32 slip_time = 3;
	/**
	 * Corresponds to the direction of the tank in skidding and may be different from the direction of movement of the tank on ice.
	 */
	PbDirection new_direction = 4;
	/**
	 * The maximum number of bullets that the tank can fire.
	 */
	uint32 bullet_max_size = 5;
	/**
	 * Time since gaining cover.
	 */
	uint32 shield_time = 6;
	/**
	 * Time since the tank was frozen.
	 */
	uint32 frozen_time = 7;
	/**
	 * Default speed of a given tank. It may be different for different types of tanks or may be changed after the player takes the bonus.
	 */
	double default_speed = 8;
	/**
	 * Current tank speed.
	 */
	double speed = 9;
	/**
	 * The variable stores information whether the tank is currently stopped.
	 */
	bool stop = 10;
	/**
	 * Variable stores the current driving direction of the tank.
	 */
	PbDirection direction = 11;
	/**
	 * Container with fired tank missiles.
	 */
	repeated PbBullet bullets = 12;
	/**
	 * The number of player lives or the armor level number of the enemy tank.
	 */
	int32 lives_count = 13;
}

message PbPlayer {
	PbTank tank = 1;
	int32 star_count = 2;
	uint32 fire_time = 3;
	bool movement = 4;
	bool menu = 5;
}

message PbEnemy {
	PbTank tank = 1;
    /**
     * Time since last change of direction.
     */
	uint32 direction_time = 2;
    /**
     * Driving time in a given direction. The time after which the direction will change.
     */
	uint32 keep_direction_time = 3;
    /**
     * Time since last attempt to resume driving
     */
    uint32 speed_time = 4;
    /**
     * Time after which the next resumption of driving will occur; non-zero speed setting.
     */
    uint32 try_to_go_time = 5;
    /**
     * Time since the last missile launch attempt.
     */
    uint32 fire_time = 6;
    /**
     * The time after which another shot will be attempted.
     */
    uint32 reload_time = 7;
    /**
     * The position to which the enemy tank is heading.
     */
    PbSdlPoint target_position = 8;
}
