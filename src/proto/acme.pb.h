// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acme.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_acme_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_acme_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_acme_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_acme_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_acme_2eproto;
namespace A0S_proto {
class PbBonus;
struct PbBonusDefaultTypeInternal;
extern PbBonusDefaultTypeInternal _PbBonus_default_instance_;
class PbBrick;
struct PbBrickDefaultTypeInternal;
extern PbBrickDefaultTypeInternal _PbBrick_default_instance_;
class PbBullet;
struct PbBulletDefaultTypeInternal;
extern PbBulletDefaultTypeInternal _PbBullet_default_instance_;
class PbEnemy;
struct PbEnemyDefaultTypeInternal;
extern PbEnemyDefaultTypeInternal _PbEnemy_default_instance_;
class PbObject;
struct PbObjectDefaultTypeInternal;
extern PbObjectDefaultTypeInternal _PbObject_default_instance_;
class PbPlayer;
struct PbPlayerDefaultTypeInternal;
extern PbPlayerDefaultTypeInternal _PbPlayer_default_instance_;
class PbSdlPoint;
struct PbSdlPointDefaultTypeInternal;
extern PbSdlPointDefaultTypeInternal _PbSdlPoint_default_instance_;
class PbSdlRect;
struct PbSdlRectDefaultTypeInternal;
extern PbSdlRectDefaultTypeInternal _PbSdlRect_default_instance_;
class PbTank;
struct PbTankDefaultTypeInternal;
extern PbTankDefaultTypeInternal _PbTank_default_instance_;
}  // namespace A0S_proto
PROTOBUF_NAMESPACE_OPEN
template <>
::A0S_proto::PbBonus* Arena::CreateMaybeMessage<::A0S_proto::PbBonus>(Arena*);
template <>
::A0S_proto::PbBrick* Arena::CreateMaybeMessage<::A0S_proto::PbBrick>(Arena*);
template <>
::A0S_proto::PbBullet* Arena::CreateMaybeMessage<::A0S_proto::PbBullet>(Arena*);
template <>
::A0S_proto::PbEnemy* Arena::CreateMaybeMessage<::A0S_proto::PbEnemy>(Arena*);
template <>
::A0S_proto::PbObject* Arena::CreateMaybeMessage<::A0S_proto::PbObject>(Arena*);
template <>
::A0S_proto::PbPlayer* Arena::CreateMaybeMessage<::A0S_proto::PbPlayer>(Arena*);
template <>
::A0S_proto::PbSdlPoint* Arena::CreateMaybeMessage<::A0S_proto::PbSdlPoint>(Arena*);
template <>
::A0S_proto::PbSdlRect* Arena::CreateMaybeMessage<::A0S_proto::PbSdlRect>(Arena*);
template <>
::A0S_proto::PbTank* Arena::CreateMaybeMessage<::A0S_proto::PbTank>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace A0S_proto {
enum PbSpriteType : int {
  ST_TANK_A = 0,
  ST_TANK_B = 1,
  ST_TANK_C = 2,
  ST_TANK_D = 3,
  ST_PLAYER_1 = 4,
  ST_PLAYER_2 = 5,
  ST_BRICK_WALL = 6,
  ST_STONE_WALL = 7,
  ST_WATER = 8,
  ST_BUSH = 9,
  ST_ICE = 10,
  ST_BONUS_GRENADE = 11,
  ST_BONUS_HELMET = 12,
  ST_BONUS_CLOCK = 13,
  ST_BONUS_SHOVEL = 14,
  ST_BONUS_TANK = 15,
  ST_BONUS_STAR = 16,
  ST_BONUS_GUN = 17,
  ST_BONUS_BOAT = 18,
  ST_SHIELD = 19,
  ST_CREATE = 20,
  ST_DESTROY_TANK = 21,
  ST_DESTROY_BULLET = 22,
  ST_BOAT_P1 = 23,
  ST_BOAT_P2 = 24,
  ST_EAGLE = 25,
  ST_DESTROY_EAGLE = 26,
  ST_FLAG = 27,
  ST_BULLET = 28,
  ST_LEFT_ENEMY = 29,
  ST_STAGE_STATUS = 30,
  ST_TANKS_LOGO = 31,
  ST_NONE = 32,
  PbSpriteType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PbSpriteType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PbSpriteType_IsValid(int value);
constexpr PbSpriteType PbSpriteType_MIN = static_cast<PbSpriteType>(0);
constexpr PbSpriteType PbSpriteType_MAX = static_cast<PbSpriteType>(32);
constexpr int PbSpriteType_ARRAYSIZE = 32 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PbSpriteType_descriptor();
template <typename T>
const std::string& PbSpriteType_Name(T value) {
  static_assert(std::is_same<T, PbSpriteType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PbSpriteType_Name().");
  return PbSpriteType_Name(static_cast<PbSpriteType>(value));
}
template <>
inline const std::string& PbSpriteType_Name(PbSpriteType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PbSpriteType_descriptor,
                                                 0, 32>(
      static_cast<int>(value));
}
inline bool PbSpriteType_Parse(absl::string_view name, PbSpriteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbSpriteType>(
      PbSpriteType_descriptor(), name, value);
}
enum PbDirection : int {
  D_UP = 0,
  D_RIGHT = 1,
  D_DOWN = 2,
  D_LEFT = 3,
  PbDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PbDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PbDirection_IsValid(int value);
constexpr PbDirection PbDirection_MIN = static_cast<PbDirection>(0);
constexpr PbDirection PbDirection_MAX = static_cast<PbDirection>(3);
constexpr int PbDirection_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PbDirection_descriptor();
template <typename T>
const std::string& PbDirection_Name(T value) {
  static_assert(std::is_same<T, PbDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PbDirection_Name().");
  return PbDirection_Name(static_cast<PbDirection>(value));
}
template <>
inline const std::string& PbDirection_Name(PbDirection value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PbDirection_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PbDirection_Parse(absl::string_view name, PbDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbDirection>(
      PbDirection_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PbSdlRect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbSdlRect) */ {
 public:
  inline PbSdlRect() : PbSdlRect(nullptr) {}
  ~PbSdlRect() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbSdlRect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbSdlRect(const PbSdlRect& from);
  PbSdlRect(PbSdlRect&& from) noexcept
    : PbSdlRect() {
    *this = ::std::move(from);
  }

  inline PbSdlRect& operator=(const PbSdlRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbSdlRect& operator=(PbSdlRect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbSdlRect& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbSdlRect* internal_default_instance() {
    return reinterpret_cast<const PbSdlRect*>(
               &_PbSdlRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbSdlRect& a, PbSdlRect& b) {
    a.Swap(&b);
  }
  inline void Swap(PbSdlRect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbSdlRect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbSdlRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbSdlRect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbSdlRect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbSdlRect& from) {
    PbSdlRect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbSdlRect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbSdlRect";
  }
  protected:
  explicit PbSdlRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 5,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // int32 w = 3;
  void clear_w() ;
  ::int32_t w() const;
  void set_w(::int32_t value);

  private:
  ::int32_t _internal_w() const;
  void _internal_set_w(::int32_t value);

  public:
  // int32 h = 5;
  void clear_h() ;
  ::int32_t h() const;
  void set_h(::int32_t value);

  private:
  ::int32_t _internal_h() const;
  void _internal_set_h(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbSdlRect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t x_;
    ::int32_t y_;
    ::int32_t w_;
    ::int32_t h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbSdlPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbSdlPoint) */ {
 public:
  inline PbSdlPoint() : PbSdlPoint(nullptr) {}
  ~PbSdlPoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbSdlPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbSdlPoint(const PbSdlPoint& from);
  PbSdlPoint(PbSdlPoint&& from) noexcept
    : PbSdlPoint() {
    *this = ::std::move(from);
  }

  inline PbSdlPoint& operator=(const PbSdlPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbSdlPoint& operator=(PbSdlPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbSdlPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbSdlPoint* internal_default_instance() {
    return reinterpret_cast<const PbSdlPoint*>(
               &_PbSdlPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PbSdlPoint& a, PbSdlPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PbSdlPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbSdlPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbSdlPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbSdlPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbSdlPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbSdlPoint& from) {
    PbSdlPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbSdlPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbSdlPoint";
  }
  protected:
  explicit PbSdlPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbSdlPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t x_;
    ::int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbObject) */ {
 public:
  inline PbObject() : PbObject(nullptr) {}
  ~PbObject() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbObject(const PbObject& from);
  PbObject(PbObject&& from) noexcept
    : PbObject() {
    *this = ::std::move(from);
  }

  inline PbObject& operator=(const PbObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbObject& operator=(PbObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbObject* internal_default_instance() {
    return reinterpret_cast<const PbObject*>(
               &_PbObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PbObject& a, PbObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PbObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbObject& from) {
    PbObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbObject";
  }
  protected:
  explicit PbObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollisionRectFieldNumber = 4,
    kDestRectFieldNumber = 5,
    kSrcRectFieldNumber = 6,
    kFrameDisplayTimeFieldNumber = 1,
    kCurrentFrameFieldNumber = 2,
    kToEraseFieldNumber = 3,
    kTypeFieldNumber = 7,
    kPosXFieldNumber = 8,
    kPosYFieldNumber = 9,
  };
  // .A0S_proto.PbSdlRect collision_rect = 4;
  bool has_collision_rect() const;
  void clear_collision_rect() ;
  const ::A0S_proto::PbSdlRect& collision_rect() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbSdlRect* release_collision_rect();
  ::A0S_proto::PbSdlRect* mutable_collision_rect();
  void set_allocated_collision_rect(::A0S_proto::PbSdlRect* collision_rect);
  private:
  const ::A0S_proto::PbSdlRect& _internal_collision_rect() const;
  ::A0S_proto::PbSdlRect* _internal_mutable_collision_rect();
  public:
  void unsafe_arena_set_allocated_collision_rect(
      ::A0S_proto::PbSdlRect* collision_rect);
  ::A0S_proto::PbSdlRect* unsafe_arena_release_collision_rect();
  // .A0S_proto.PbSdlRect dest_rect = 5;
  bool has_dest_rect() const;
  void clear_dest_rect() ;
  const ::A0S_proto::PbSdlRect& dest_rect() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbSdlRect* release_dest_rect();
  ::A0S_proto::PbSdlRect* mutable_dest_rect();
  void set_allocated_dest_rect(::A0S_proto::PbSdlRect* dest_rect);
  private:
  const ::A0S_proto::PbSdlRect& _internal_dest_rect() const;
  ::A0S_proto::PbSdlRect* _internal_mutable_dest_rect();
  public:
  void unsafe_arena_set_allocated_dest_rect(
      ::A0S_proto::PbSdlRect* dest_rect);
  ::A0S_proto::PbSdlRect* unsafe_arena_release_dest_rect();
  // .A0S_proto.PbSdlRect src_rect = 6;
  bool has_src_rect() const;
  void clear_src_rect() ;
  const ::A0S_proto::PbSdlRect& src_rect() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbSdlRect* release_src_rect();
  ::A0S_proto::PbSdlRect* mutable_src_rect();
  void set_allocated_src_rect(::A0S_proto::PbSdlRect* src_rect);
  private:
  const ::A0S_proto::PbSdlRect& _internal_src_rect() const;
  ::A0S_proto::PbSdlRect* _internal_mutable_src_rect();
  public:
  void unsafe_arena_set_allocated_src_rect(
      ::A0S_proto::PbSdlRect* src_rect);
  ::A0S_proto::PbSdlRect* unsafe_arena_release_src_rect();
  // uint32 frame_display_time = 1;
  void clear_frame_display_time() ;
  ::uint32_t frame_display_time() const;
  void set_frame_display_time(::uint32_t value);

  private:
  ::uint32_t _internal_frame_display_time() const;
  void _internal_set_frame_display_time(::uint32_t value);

  public:
  // int32 current_frame = 2;
  void clear_current_frame() ;
  ::int32_t current_frame() const;
  void set_current_frame(::int32_t value);

  private:
  ::int32_t _internal_current_frame() const;
  void _internal_set_current_frame(::int32_t value);

  public:
  // bool to_erase = 3;
  void clear_to_erase() ;
  bool to_erase() const;
  void set_to_erase(bool value);

  private:
  bool _internal_to_erase() const;
  void _internal_set_to_erase(bool value);

  public:
  // .A0S_proto.PbSpriteType type = 7;
  void clear_type() ;
  ::A0S_proto::PbSpriteType type() const;
  void set_type(::A0S_proto::PbSpriteType value);

  private:
  ::A0S_proto::PbSpriteType _internal_type() const;
  void _internal_set_type(::A0S_proto::PbSpriteType value);

  public:
  // double pos_x = 8;
  void clear_pos_x() ;
  double pos_x() const;
  void set_pos_x(double value);

  private:
  double _internal_pos_x() const;
  void _internal_set_pos_x(double value);

  public:
  // double pos_y = 9;
  void clear_pos_y() ;
  double pos_y() const;
  void set_pos_y(double value);

  private:
  double _internal_pos_y() const;
  void _internal_set_pos_y(double value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbSdlRect* collision_rect_;
    ::A0S_proto::PbSdlRect* dest_rect_;
    ::A0S_proto::PbSdlRect* src_rect_;
    ::uint32_t frame_display_time_;
    ::int32_t current_frame_;
    bool to_erase_;
    int type_;
    double pos_x_;
    double pos_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbBullet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbBullet) */ {
 public:
  inline PbBullet() : PbBullet(nullptr) {}
  ~PbBullet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbBullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbBullet(const PbBullet& from);
  PbBullet(PbBullet&& from) noexcept
    : PbBullet() {
    *this = ::std::move(from);
  }

  inline PbBullet& operator=(const PbBullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbBullet& operator=(PbBullet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbBullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbBullet* internal_default_instance() {
    return reinterpret_cast<const PbBullet*>(
               &_PbBullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PbBullet& a, PbBullet& b) {
    a.Swap(&b);
  }
  inline void Swap(PbBullet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbBullet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbBullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbBullet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbBullet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbBullet& from) {
    PbBullet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbBullet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbBullet";
  }
  protected:
  explicit PbBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kCollideFieldNumber = 3,
    kIncreasedDamageFieldNumber = 4,
    kDirectionFieldNumber = 5,
  };
  // .A0S_proto.PbObject object = 1;
  bool has_object() const;
  void clear_object() ;
  const ::A0S_proto::PbObject& object() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbObject* release_object();
  ::A0S_proto::PbObject* mutable_object();
  void set_allocated_object(::A0S_proto::PbObject* object);
  private:
  const ::A0S_proto::PbObject& _internal_object() const;
  ::A0S_proto::PbObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::A0S_proto::PbObject* object);
  ::A0S_proto::PbObject* unsafe_arena_release_object();
  // double speed = 2;
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // bool collide = 3;
  void clear_collide() ;
  bool collide() const;
  void set_collide(bool value);

  private:
  bool _internal_collide() const;
  void _internal_set_collide(bool value);

  public:
  // bool increased_damage = 4;
  void clear_increased_damage() ;
  bool increased_damage() const;
  void set_increased_damage(bool value);

  private:
  bool _internal_increased_damage() const;
  void _internal_set_increased_damage(bool value);

  public:
  // .A0S_proto.PbDirection direction = 5;
  void clear_direction() ;
  ::A0S_proto::PbDirection direction() const;
  void set_direction(::A0S_proto::PbDirection value);

  private:
  ::A0S_proto::PbDirection _internal_direction() const;
  void _internal_set_direction(::A0S_proto::PbDirection value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbBullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbObject* object_;
    double speed_;
    bool collide_;
    bool increased_damage_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbBonus) */ {
 public:
  inline PbBonus() : PbBonus(nullptr) {}
  ~PbBonus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbBonus(const PbBonus& from);
  PbBonus(PbBonus&& from) noexcept
    : PbBonus() {
    *this = ::std::move(from);
  }

  inline PbBonus& operator=(const PbBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbBonus& operator=(PbBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbBonus* internal_default_instance() {
    return reinterpret_cast<const PbBonus*>(
               &_PbBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PbBonus& a, PbBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(PbBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbBonus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbBonus& from) {
    PbBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbBonus";
  }
  protected:
  explicit PbBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
    kBonusShowTimeFieldNumber = 2,
    kShowFieldNumber = 3,
  };
  // .A0S_proto.PbObject object = 1;
  bool has_object() const;
  void clear_object() ;
  const ::A0S_proto::PbObject& object() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbObject* release_object();
  ::A0S_proto::PbObject* mutable_object();
  void set_allocated_object(::A0S_proto::PbObject* object);
  private:
  const ::A0S_proto::PbObject& _internal_object() const;
  ::A0S_proto::PbObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::A0S_proto::PbObject* object);
  ::A0S_proto::PbObject* unsafe_arena_release_object();
  // uint32 bonus_show_time = 2;
  void clear_bonus_show_time() ;
  ::uint32_t bonus_show_time() const;
  void set_bonus_show_time(::uint32_t value);

  private:
  ::uint32_t _internal_bonus_show_time() const;
  void _internal_set_bonus_show_time(::uint32_t value);

  public:
  // bool show = 3;
  void clear_show() ;
  bool show() const;
  void set_show(bool value);

  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbObject* object_;
    ::uint32_t bonus_show_time_;
    bool show_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbBrick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbBrick) */ {
 public:
  inline PbBrick() : PbBrick(nullptr) {}
  ~PbBrick() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbBrick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbBrick(const PbBrick& from);
  PbBrick(PbBrick&& from) noexcept
    : PbBrick() {
    *this = ::std::move(from);
  }

  inline PbBrick& operator=(const PbBrick& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbBrick& operator=(PbBrick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbBrick& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbBrick* internal_default_instance() {
    return reinterpret_cast<const PbBrick*>(
               &_PbBrick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PbBrick& a, PbBrick& b) {
    a.Swap(&b);
  }
  inline void Swap(PbBrick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbBrick* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbBrick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbBrick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbBrick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbBrick& from) {
    PbBrick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbBrick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbBrick";
  }
  protected:
  explicit PbBrick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
    kCollisionCountFieldNumber = 2,
    kStateCodeFieldNumber = 3,
  };
  // .A0S_proto.PbObject object = 1;
  bool has_object() const;
  void clear_object() ;
  const ::A0S_proto::PbObject& object() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbObject* release_object();
  ::A0S_proto::PbObject* mutable_object();
  void set_allocated_object(::A0S_proto::PbObject* object);
  private:
  const ::A0S_proto::PbObject& _internal_object() const;
  ::A0S_proto::PbObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::A0S_proto::PbObject* object);
  ::A0S_proto::PbObject* unsafe_arena_release_object();
  // int32 collision_count = 2;
  void clear_collision_count() ;
  ::int32_t collision_count() const;
  void set_collision_count(::int32_t value);

  private:
  ::int32_t _internal_collision_count() const;
  void _internal_set_collision_count(::int32_t value);

  public:
  // int32 state_code = 3;
  void clear_state_code() ;
  ::int32_t state_code() const;
  void set_state_code(::int32_t value);

  private:
  ::int32_t _internal_state_code() const;
  void _internal_set_state_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbBrick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbObject* object_;
    ::int32_t collision_count_;
    ::int32_t state_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbTank final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbTank) */ {
 public:
  inline PbTank() : PbTank(nullptr) {}
  ~PbTank() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbTank(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbTank(const PbTank& from);
  PbTank(PbTank&& from) noexcept
    : PbTank() {
    *this = ::std::move(from);
  }

  inline PbTank& operator=(const PbTank& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbTank& operator=(PbTank&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbTank& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbTank* internal_default_instance() {
    return reinterpret_cast<const PbTank*>(
               &_PbTank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PbTank& a, PbTank& b) {
    a.Swap(&b);
  }
  inline void Swap(PbTank* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbTank* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbTank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbTank>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbTank& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbTank& from) {
    PbTank::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbTank* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbTank";
  }
  protected:
  explicit PbTank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kSlipTimeFieldNumber = 3,
    kNewDirectionFieldNumber = 4,
    kBulletMaxSizeFieldNumber = 5,
    kDefaultSpeedFieldNumber = 6,
  };
  // .A0S_proto.PbObject object = 1;
  bool has_object() const;
  void clear_object() ;
  const ::A0S_proto::PbObject& object() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbObject* release_object();
  ::A0S_proto::PbObject* mutable_object();
  void set_allocated_object(::A0S_proto::PbObject* object);
  private:
  const ::A0S_proto::PbObject& _internal_object() const;
  ::A0S_proto::PbObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::A0S_proto::PbObject* object);
  ::A0S_proto::PbObject* unsafe_arena_release_object();
  // int32 flags = 2;
  void clear_flags() ;
  ::int32_t flags() const;
  void set_flags(::int32_t value);

  private:
  ::int32_t _internal_flags() const;
  void _internal_set_flags(::int32_t value);

  public:
  // int32 slip_time = 3;
  void clear_slip_time() ;
  ::int32_t slip_time() const;
  void set_slip_time(::int32_t value);

  private:
  ::int32_t _internal_slip_time() const;
  void _internal_set_slip_time(::int32_t value);

  public:
  // int32 new_direction = 4;
  void clear_new_direction() ;
  ::int32_t new_direction() const;
  void set_new_direction(::int32_t value);

  private:
  ::int32_t _internal_new_direction() const;
  void _internal_set_new_direction(::int32_t value);

  public:
  // uint32 bullet_max_size = 5;
  void clear_bullet_max_size() ;
  ::uint32_t bullet_max_size() const;
  void set_bullet_max_size(::uint32_t value);

  private:
  ::uint32_t _internal_bullet_max_size() const;
  void _internal_set_bullet_max_size(::uint32_t value);

  public:
  // double default_speed = 6;
  void clear_default_speed() ;
  double default_speed() const;
  void set_default_speed(double value);

  private:
  double _internal_default_speed() const;
  void _internal_set_default_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbTank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbObject* object_;
    ::int32_t flags_;
    ::int32_t slip_time_;
    ::int32_t new_direction_;
    ::uint32_t bullet_max_size_;
    double default_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbPlayer) */ {
 public:
  inline PbPlayer() : PbPlayer(nullptr) {}
  ~PbPlayer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbPlayer(const PbPlayer& from);
  PbPlayer(PbPlayer&& from) noexcept
    : PbPlayer() {
    *this = ::std::move(from);
  }

  inline PbPlayer& operator=(const PbPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbPlayer& operator=(PbPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbPlayer* internal_default_instance() {
    return reinterpret_cast<const PbPlayer*>(
               &_PbPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PbPlayer& a, PbPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(PbPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbPlayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbPlayer& from) {
    PbPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbPlayer";
  }
  protected:
  explicit PbPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTankFieldNumber = 1,
    kStarCountFieldNumber = 2,
    kFireTimeFieldNumber = 3,
    kMovementFieldNumber = 4,
    kMenuFieldNumber = 5,
  };
  // .A0S_proto.PbTank tank = 1;
  bool has_tank() const;
  void clear_tank() ;
  const ::A0S_proto::PbTank& tank() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbTank* release_tank();
  ::A0S_proto::PbTank* mutable_tank();
  void set_allocated_tank(::A0S_proto::PbTank* tank);
  private:
  const ::A0S_proto::PbTank& _internal_tank() const;
  ::A0S_proto::PbTank* _internal_mutable_tank();
  public:
  void unsafe_arena_set_allocated_tank(
      ::A0S_proto::PbTank* tank);
  ::A0S_proto::PbTank* unsafe_arena_release_tank();
  // int32 star_count = 2;
  void clear_star_count() ;
  ::int32_t star_count() const;
  void set_star_count(::int32_t value);

  private:
  ::int32_t _internal_star_count() const;
  void _internal_set_star_count(::int32_t value);

  public:
  // uint32 fire_time = 3;
  void clear_fire_time() ;
  ::uint32_t fire_time() const;
  void set_fire_time(::uint32_t value);

  private:
  ::uint32_t _internal_fire_time() const;
  void _internal_set_fire_time(::uint32_t value);

  public:
  // bool movement = 4;
  void clear_movement() ;
  bool movement() const;
  void set_movement(bool value);

  private:
  bool _internal_movement() const;
  void _internal_set_movement(bool value);

  public:
  // bool menu = 5;
  void clear_menu() ;
  bool menu() const;
  void set_menu(bool value);

  private:
  bool _internal_menu() const;
  void _internal_set_menu(bool value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbTank* tank_;
    ::int32_t star_count_;
    ::uint32_t fire_time_;
    bool movement_;
    bool menu_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};// -------------------------------------------------------------------

class PbEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A0S_proto.PbEnemy) */ {
 public:
  inline PbEnemy() : PbEnemy(nullptr) {}
  ~PbEnemy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbEnemy(const PbEnemy& from);
  PbEnemy(PbEnemy&& from) noexcept
    : PbEnemy() {
    *this = ::std::move(from);
  }

  inline PbEnemy& operator=(const PbEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbEnemy& operator=(PbEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbEnemy* internal_default_instance() {
    return reinterpret_cast<const PbEnemy*>(
               &_PbEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PbEnemy& a, PbEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(PbEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbEnemy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbEnemy& from) {
    PbEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A0S_proto.PbEnemy";
  }
  protected:
  explicit PbEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTankFieldNumber = 1,
    kTargetPositionFieldNumber = 8,
    kDirectionTimeFieldNumber = 2,
    kKeepDirectionTimeFieldNumber = 3,
    kSpeedTimeFieldNumber = 4,
    kTryToGoTimeFieldNumber = 5,
    kFireTimeFieldNumber = 6,
    kReloadTimeFieldNumber = 7,
  };
  // .A0S_proto.PbTank tank = 1;
  bool has_tank() const;
  void clear_tank() ;
  const ::A0S_proto::PbTank& tank() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbTank* release_tank();
  ::A0S_proto::PbTank* mutable_tank();
  void set_allocated_tank(::A0S_proto::PbTank* tank);
  private:
  const ::A0S_proto::PbTank& _internal_tank() const;
  ::A0S_proto::PbTank* _internal_mutable_tank();
  public:
  void unsafe_arena_set_allocated_tank(
      ::A0S_proto::PbTank* tank);
  ::A0S_proto::PbTank* unsafe_arena_release_tank();
  // .A0S_proto.PbSdlPoint target_position = 8;
  bool has_target_position() const;
  void clear_target_position() ;
  const ::A0S_proto::PbSdlPoint& target_position() const;
  PROTOBUF_NODISCARD ::A0S_proto::PbSdlPoint* release_target_position();
  ::A0S_proto::PbSdlPoint* mutable_target_position();
  void set_allocated_target_position(::A0S_proto::PbSdlPoint* target_position);
  private:
  const ::A0S_proto::PbSdlPoint& _internal_target_position() const;
  ::A0S_proto::PbSdlPoint* _internal_mutable_target_position();
  public:
  void unsafe_arena_set_allocated_target_position(
      ::A0S_proto::PbSdlPoint* target_position);
  ::A0S_proto::PbSdlPoint* unsafe_arena_release_target_position();
  // uint32 direction_time = 2;
  void clear_direction_time() ;
  ::uint32_t direction_time() const;
  void set_direction_time(::uint32_t value);

  private:
  ::uint32_t _internal_direction_time() const;
  void _internal_set_direction_time(::uint32_t value);

  public:
  // uint32 keep_direction_time = 3;
  void clear_keep_direction_time() ;
  ::uint32_t keep_direction_time() const;
  void set_keep_direction_time(::uint32_t value);

  private:
  ::uint32_t _internal_keep_direction_time() const;
  void _internal_set_keep_direction_time(::uint32_t value);

  public:
  // uint32 speed_time = 4;
  void clear_speed_time() ;
  ::uint32_t speed_time() const;
  void set_speed_time(::uint32_t value);

  private:
  ::uint32_t _internal_speed_time() const;
  void _internal_set_speed_time(::uint32_t value);

  public:
  // uint32 try_to_go_time = 5;
  void clear_try_to_go_time() ;
  ::uint32_t try_to_go_time() const;
  void set_try_to_go_time(::uint32_t value);

  private:
  ::uint32_t _internal_try_to_go_time() const;
  void _internal_set_try_to_go_time(::uint32_t value);

  public:
  // uint32 fire_time = 6;
  void clear_fire_time() ;
  ::uint32_t fire_time() const;
  void set_fire_time(::uint32_t value);

  private:
  ::uint32_t _internal_fire_time() const;
  void _internal_set_fire_time(::uint32_t value);

  public:
  // uint32 reload_time = 7;
  void clear_reload_time() ;
  ::uint32_t reload_time() const;
  void set_reload_time(::uint32_t value);

  private:
  ::uint32_t _internal_reload_time() const;
  void _internal_set_reload_time(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:A0S_proto.PbEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::A0S_proto::PbTank* tank_;
    ::A0S_proto::PbSdlPoint* target_position_;
    ::uint32_t direction_time_;
    ::uint32_t keep_direction_time_;
    ::uint32_t speed_time_;
    ::uint32_t try_to_go_time_;
    ::uint32_t fire_time_;
    ::uint32_t reload_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PbSdlRect

// int32 x = 1;
inline void PbSdlRect::clear_x() {
  _impl_.x_ = 0;
}
inline ::int32_t PbSdlRect::x() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlRect.x)
  return _internal_x();
}
inline void PbSdlRect::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlRect.x)
}
inline ::int32_t PbSdlRect::_internal_x() const {
  return _impl_.x_;
}
inline void PbSdlRect::_internal_set_x(::int32_t value) {
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void PbSdlRect::clear_y() {
  _impl_.y_ = 0;
}
inline ::int32_t PbSdlRect::y() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlRect.y)
  return _internal_y();
}
inline void PbSdlRect::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlRect.y)
}
inline ::int32_t PbSdlRect::_internal_y() const {
  return _impl_.y_;
}
inline void PbSdlRect::_internal_set_y(::int32_t value) {
  ;
  _impl_.y_ = value;
}

// int32 w = 3;
inline void PbSdlRect::clear_w() {
  _impl_.w_ = 0;
}
inline ::int32_t PbSdlRect::w() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlRect.w)
  return _internal_w();
}
inline void PbSdlRect::set_w(::int32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlRect.w)
}
inline ::int32_t PbSdlRect::_internal_w() const {
  return _impl_.w_;
}
inline void PbSdlRect::_internal_set_w(::int32_t value) {
  ;
  _impl_.w_ = value;
}

// int32 h = 5;
inline void PbSdlRect::clear_h() {
  _impl_.h_ = 0;
}
inline ::int32_t PbSdlRect::h() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlRect.h)
  return _internal_h();
}
inline void PbSdlRect::set_h(::int32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlRect.h)
}
inline ::int32_t PbSdlRect::_internal_h() const {
  return _impl_.h_;
}
inline void PbSdlRect::_internal_set_h(::int32_t value) {
  ;
  _impl_.h_ = value;
}

// -------------------------------------------------------------------

// PbSdlPoint

// int32 x = 1;
inline void PbSdlPoint::clear_x() {
  _impl_.x_ = 0;
}
inline ::int32_t PbSdlPoint::x() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlPoint.x)
  return _internal_x();
}
inline void PbSdlPoint::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlPoint.x)
}
inline ::int32_t PbSdlPoint::_internal_x() const {
  return _impl_.x_;
}
inline void PbSdlPoint::_internal_set_x(::int32_t value) {
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void PbSdlPoint::clear_y() {
  _impl_.y_ = 0;
}
inline ::int32_t PbSdlPoint::y() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbSdlPoint.y)
  return _internal_y();
}
inline void PbSdlPoint::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbSdlPoint.y)
}
inline ::int32_t PbSdlPoint::_internal_y() const {
  return _impl_.y_;
}
inline void PbSdlPoint::_internal_set_y(::int32_t value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// PbObject

// uint32 frame_display_time = 1;
inline void PbObject::clear_frame_display_time() {
  _impl_.frame_display_time_ = 0u;
}
inline ::uint32_t PbObject::frame_display_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.frame_display_time)
  return _internal_frame_display_time();
}
inline void PbObject::set_frame_display_time(::uint32_t value) {
  _internal_set_frame_display_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.frame_display_time)
}
inline ::uint32_t PbObject::_internal_frame_display_time() const {
  return _impl_.frame_display_time_;
}
inline void PbObject::_internal_set_frame_display_time(::uint32_t value) {
  ;
  _impl_.frame_display_time_ = value;
}

// int32 current_frame = 2;
inline void PbObject::clear_current_frame() {
  _impl_.current_frame_ = 0;
}
inline ::int32_t PbObject::current_frame() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.current_frame)
  return _internal_current_frame();
}
inline void PbObject::set_current_frame(::int32_t value) {
  _internal_set_current_frame(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.current_frame)
}
inline ::int32_t PbObject::_internal_current_frame() const {
  return _impl_.current_frame_;
}
inline void PbObject::_internal_set_current_frame(::int32_t value) {
  ;
  _impl_.current_frame_ = value;
}

// bool to_erase = 3;
inline void PbObject::clear_to_erase() {
  _impl_.to_erase_ = false;
}
inline bool PbObject::to_erase() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.to_erase)
  return _internal_to_erase();
}
inline void PbObject::set_to_erase(bool value) {
  _internal_set_to_erase(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.to_erase)
}
inline bool PbObject::_internal_to_erase() const {
  return _impl_.to_erase_;
}
inline void PbObject::_internal_set_to_erase(bool value) {
  ;
  _impl_.to_erase_ = value;
}

// .A0S_proto.PbSdlRect collision_rect = 4;
inline bool PbObject::has_collision_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.collision_rect_ != nullptr);
  return value;
}
inline void PbObject::clear_collision_rect() {
  if (_impl_.collision_rect_ != nullptr) _impl_.collision_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbSdlRect& PbObject::_internal_collision_rect() const {
  const ::A0S_proto::PbSdlRect* p = _impl_.collision_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbSdlRect&>(
      ::A0S_proto::_PbSdlRect_default_instance_);
}
inline const ::A0S_proto::PbSdlRect& PbObject::collision_rect() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.collision_rect)
  return _internal_collision_rect();
}
inline void PbObject::unsafe_arena_set_allocated_collision_rect(
    ::A0S_proto::PbSdlRect* collision_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_rect_);
  }
  _impl_.collision_rect_ = collision_rect;
  if (collision_rect) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbObject.collision_rect)
}
inline ::A0S_proto::PbSdlRect* PbObject::release_collision_rect() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbSdlRect* temp = _impl_.collision_rect_;
  _impl_.collision_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::unsafe_arena_release_collision_rect() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbObject.collision_rect)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbSdlRect* temp = _impl_.collision_rect_;
  _impl_.collision_rect_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::_internal_mutable_collision_rect() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.collision_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbSdlRect>(GetArenaForAllocation());
    _impl_.collision_rect_ = p;
  }
  return _impl_.collision_rect_;
}
inline ::A0S_proto::PbSdlRect* PbObject::mutable_collision_rect() {
  ::A0S_proto::PbSdlRect* _msg = _internal_mutable_collision_rect();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbObject.collision_rect)
  return _msg;
}
inline void PbObject::set_allocated_collision_rect(::A0S_proto::PbSdlRect* collision_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collision_rect_;
  }
  if (collision_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collision_rect);
    if (message_arena != submessage_arena) {
      collision_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.collision_rect_ = collision_rect;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbObject.collision_rect)
}

// .A0S_proto.PbSdlRect dest_rect = 5;
inline bool PbObject::has_dest_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dest_rect_ != nullptr);
  return value;
}
inline void PbObject::clear_dest_rect() {
  if (_impl_.dest_rect_ != nullptr) _impl_.dest_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::A0S_proto::PbSdlRect& PbObject::_internal_dest_rect() const {
  const ::A0S_proto::PbSdlRect* p = _impl_.dest_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbSdlRect&>(
      ::A0S_proto::_PbSdlRect_default_instance_);
}
inline const ::A0S_proto::PbSdlRect& PbObject::dest_rect() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.dest_rect)
  return _internal_dest_rect();
}
inline void PbObject::unsafe_arena_set_allocated_dest_rect(
    ::A0S_proto::PbSdlRect* dest_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dest_rect_);
  }
  _impl_.dest_rect_ = dest_rect;
  if (dest_rect) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbObject.dest_rect)
}
inline ::A0S_proto::PbSdlRect* PbObject::release_dest_rect() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::A0S_proto::PbSdlRect* temp = _impl_.dest_rect_;
  _impl_.dest_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::unsafe_arena_release_dest_rect() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbObject.dest_rect)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::A0S_proto::PbSdlRect* temp = _impl_.dest_rect_;
  _impl_.dest_rect_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::_internal_mutable_dest_rect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dest_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbSdlRect>(GetArenaForAllocation());
    _impl_.dest_rect_ = p;
  }
  return _impl_.dest_rect_;
}
inline ::A0S_proto::PbSdlRect* PbObject::mutable_dest_rect() {
  ::A0S_proto::PbSdlRect* _msg = _internal_mutable_dest_rect();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbObject.dest_rect)
  return _msg;
}
inline void PbObject::set_allocated_dest_rect(::A0S_proto::PbSdlRect* dest_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dest_rect_;
  }
  if (dest_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dest_rect);
    if (message_arena != submessage_arena) {
      dest_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dest_rect_ = dest_rect;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbObject.dest_rect)
}

// .A0S_proto.PbSdlRect src_rect = 6;
inline bool PbObject::has_src_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_rect_ != nullptr);
  return value;
}
inline void PbObject::clear_src_rect() {
  if (_impl_.src_rect_ != nullptr) _impl_.src_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::A0S_proto::PbSdlRect& PbObject::_internal_src_rect() const {
  const ::A0S_proto::PbSdlRect* p = _impl_.src_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbSdlRect&>(
      ::A0S_proto::_PbSdlRect_default_instance_);
}
inline const ::A0S_proto::PbSdlRect& PbObject::src_rect() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.src_rect)
  return _internal_src_rect();
}
inline void PbObject::unsafe_arena_set_allocated_src_rect(
    ::A0S_proto::PbSdlRect* src_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_rect_);
  }
  _impl_.src_rect_ = src_rect;
  if (src_rect) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbObject.src_rect)
}
inline ::A0S_proto::PbSdlRect* PbObject::release_src_rect() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::A0S_proto::PbSdlRect* temp = _impl_.src_rect_;
  _impl_.src_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::unsafe_arena_release_src_rect() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbObject.src_rect)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::A0S_proto::PbSdlRect* temp = _impl_.src_rect_;
  _impl_.src_rect_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbSdlRect* PbObject::_internal_mutable_src_rect() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.src_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbSdlRect>(GetArenaForAllocation());
    _impl_.src_rect_ = p;
  }
  return _impl_.src_rect_;
}
inline ::A0S_proto::PbSdlRect* PbObject::mutable_src_rect() {
  ::A0S_proto::PbSdlRect* _msg = _internal_mutable_src_rect();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbObject.src_rect)
  return _msg;
}
inline void PbObject::set_allocated_src_rect(::A0S_proto::PbSdlRect* src_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.src_rect_;
  }
  if (src_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(src_rect);
    if (message_arena != submessage_arena) {
      src_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.src_rect_ = src_rect;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbObject.src_rect)
}

// .A0S_proto.PbSpriteType type = 7;
inline void PbObject::clear_type() {
  _impl_.type_ = 0;
}
inline ::A0S_proto::PbSpriteType PbObject::type() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.type)
  return _internal_type();
}
inline void PbObject::set_type(::A0S_proto::PbSpriteType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.type)
}
inline ::A0S_proto::PbSpriteType PbObject::_internal_type() const {
  return static_cast<::A0S_proto::PbSpriteType>(_impl_.type_);
}
inline void PbObject::_internal_set_type(::A0S_proto::PbSpriteType value) {
  ;
  _impl_.type_ = value;
}

// double pos_x = 8;
inline void PbObject::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline double PbObject::pos_x() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.pos_x)
  return _internal_pos_x();
}
inline void PbObject::set_pos_x(double value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.pos_x)
}
inline double PbObject::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline void PbObject::_internal_set_pos_x(double value) {
  ;
  _impl_.pos_x_ = value;
}

// double pos_y = 9;
inline void PbObject::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline double PbObject::pos_y() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbObject.pos_y)
  return _internal_pos_y();
}
inline void PbObject::set_pos_y(double value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbObject.pos_y)
}
inline double PbObject::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline void PbObject::_internal_set_pos_y(double value) {
  ;
  _impl_.pos_y_ = value;
}

// -------------------------------------------------------------------

// PbBullet

// .A0S_proto.PbObject object = 1;
inline bool PbBullet::has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline void PbBullet::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbObject& PbBullet::_internal_object() const {
  const ::A0S_proto::PbObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbObject&>(
      ::A0S_proto::_PbObject_default_instance_);
}
inline const ::A0S_proto::PbObject& PbBullet::object() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBullet.object)
  return _internal_object();
}
inline void PbBullet::unsafe_arena_set_allocated_object(
    ::A0S_proto::PbObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbBullet.object)
}
inline ::A0S_proto::PbObject* PbBullet::release_object() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbObject* PbBullet::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbBullet.object)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbObject* PbBullet::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::A0S_proto::PbObject* PbBullet::mutable_object() {
  ::A0S_proto::PbObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbBullet.object)
  return _msg;
}
inline void PbBullet::set_allocated_object(::A0S_proto::PbObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbBullet.object)
}

// double speed = 2;
inline void PbBullet::clear_speed() {
  _impl_.speed_ = 0;
}
inline double PbBullet::speed() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBullet.speed)
  return _internal_speed();
}
inline void PbBullet::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBullet.speed)
}
inline double PbBullet::_internal_speed() const {
  return _impl_.speed_;
}
inline void PbBullet::_internal_set_speed(double value) {
  ;
  _impl_.speed_ = value;
}

// bool collide = 3;
inline void PbBullet::clear_collide() {
  _impl_.collide_ = false;
}
inline bool PbBullet::collide() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBullet.collide)
  return _internal_collide();
}
inline void PbBullet::set_collide(bool value) {
  _internal_set_collide(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBullet.collide)
}
inline bool PbBullet::_internal_collide() const {
  return _impl_.collide_;
}
inline void PbBullet::_internal_set_collide(bool value) {
  ;
  _impl_.collide_ = value;
}

// bool increased_damage = 4;
inline void PbBullet::clear_increased_damage() {
  _impl_.increased_damage_ = false;
}
inline bool PbBullet::increased_damage() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBullet.increased_damage)
  return _internal_increased_damage();
}
inline void PbBullet::set_increased_damage(bool value) {
  _internal_set_increased_damage(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBullet.increased_damage)
}
inline bool PbBullet::_internal_increased_damage() const {
  return _impl_.increased_damage_;
}
inline void PbBullet::_internal_set_increased_damage(bool value) {
  ;
  _impl_.increased_damage_ = value;
}

// .A0S_proto.PbDirection direction = 5;
inline void PbBullet::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::A0S_proto::PbDirection PbBullet::direction() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBullet.direction)
  return _internal_direction();
}
inline void PbBullet::set_direction(::A0S_proto::PbDirection value) {
   _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBullet.direction)
}
inline ::A0S_proto::PbDirection PbBullet::_internal_direction() const {
  return static_cast<::A0S_proto::PbDirection>(_impl_.direction_);
}
inline void PbBullet::_internal_set_direction(::A0S_proto::PbDirection value) {
  ;
  _impl_.direction_ = value;
}

// -------------------------------------------------------------------

// PbBonus

// .A0S_proto.PbObject object = 1;
inline bool PbBonus::has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline void PbBonus::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbObject& PbBonus::_internal_object() const {
  const ::A0S_proto::PbObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbObject&>(
      ::A0S_proto::_PbObject_default_instance_);
}
inline const ::A0S_proto::PbObject& PbBonus::object() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBonus.object)
  return _internal_object();
}
inline void PbBonus::unsafe_arena_set_allocated_object(
    ::A0S_proto::PbObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbBonus.object)
}
inline ::A0S_proto::PbObject* PbBonus::release_object() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbObject* PbBonus::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbBonus.object)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbObject* PbBonus::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::A0S_proto::PbObject* PbBonus::mutable_object() {
  ::A0S_proto::PbObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbBonus.object)
  return _msg;
}
inline void PbBonus::set_allocated_object(::A0S_proto::PbObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbBonus.object)
}

// uint32 bonus_show_time = 2;
inline void PbBonus::clear_bonus_show_time() {
  _impl_.bonus_show_time_ = 0u;
}
inline ::uint32_t PbBonus::bonus_show_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBonus.bonus_show_time)
  return _internal_bonus_show_time();
}
inline void PbBonus::set_bonus_show_time(::uint32_t value) {
  _internal_set_bonus_show_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBonus.bonus_show_time)
}
inline ::uint32_t PbBonus::_internal_bonus_show_time() const {
  return _impl_.bonus_show_time_;
}
inline void PbBonus::_internal_set_bonus_show_time(::uint32_t value) {
  ;
  _impl_.bonus_show_time_ = value;
}

// bool show = 3;
inline void PbBonus::clear_show() {
  _impl_.show_ = false;
}
inline bool PbBonus::show() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBonus.show)
  return _internal_show();
}
inline void PbBonus::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBonus.show)
}
inline bool PbBonus::_internal_show() const {
  return _impl_.show_;
}
inline void PbBonus::_internal_set_show(bool value) {
  ;
  _impl_.show_ = value;
}

// -------------------------------------------------------------------

// PbBrick

// .A0S_proto.PbObject object = 1;
inline bool PbBrick::has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline void PbBrick::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbObject& PbBrick::_internal_object() const {
  const ::A0S_proto::PbObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbObject&>(
      ::A0S_proto::_PbObject_default_instance_);
}
inline const ::A0S_proto::PbObject& PbBrick::object() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBrick.object)
  return _internal_object();
}
inline void PbBrick::unsafe_arena_set_allocated_object(
    ::A0S_proto::PbObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbBrick.object)
}
inline ::A0S_proto::PbObject* PbBrick::release_object() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbObject* PbBrick::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbBrick.object)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbObject* PbBrick::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::A0S_proto::PbObject* PbBrick::mutable_object() {
  ::A0S_proto::PbObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbBrick.object)
  return _msg;
}
inline void PbBrick::set_allocated_object(::A0S_proto::PbObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbBrick.object)
}

// int32 collision_count = 2;
inline void PbBrick::clear_collision_count() {
  _impl_.collision_count_ = 0;
}
inline ::int32_t PbBrick::collision_count() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBrick.collision_count)
  return _internal_collision_count();
}
inline void PbBrick::set_collision_count(::int32_t value) {
  _internal_set_collision_count(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBrick.collision_count)
}
inline ::int32_t PbBrick::_internal_collision_count() const {
  return _impl_.collision_count_;
}
inline void PbBrick::_internal_set_collision_count(::int32_t value) {
  ;
  _impl_.collision_count_ = value;
}

// int32 state_code = 3;
inline void PbBrick::clear_state_code() {
  _impl_.state_code_ = 0;
}
inline ::int32_t PbBrick::state_code() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbBrick.state_code)
  return _internal_state_code();
}
inline void PbBrick::set_state_code(::int32_t value) {
  _internal_set_state_code(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbBrick.state_code)
}
inline ::int32_t PbBrick::_internal_state_code() const {
  return _impl_.state_code_;
}
inline void PbBrick::_internal_set_state_code(::int32_t value) {
  ;
  _impl_.state_code_ = value;
}

// -------------------------------------------------------------------

// PbTank

// .A0S_proto.PbObject object = 1;
inline bool PbTank::has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline void PbTank::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbObject& PbTank::_internal_object() const {
  const ::A0S_proto::PbObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbObject&>(
      ::A0S_proto::_PbObject_default_instance_);
}
inline const ::A0S_proto::PbObject& PbTank::object() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.object)
  return _internal_object();
}
inline void PbTank::unsafe_arena_set_allocated_object(
    ::A0S_proto::PbObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbTank.object)
}
inline ::A0S_proto::PbObject* PbTank::release_object() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbObject* PbTank::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbTank.object)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbObject* PbTank::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::A0S_proto::PbObject* PbTank::mutable_object() {
  ::A0S_proto::PbObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbTank.object)
  return _msg;
}
inline void PbTank::set_allocated_object(::A0S_proto::PbObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbTank.object)
}

// int32 flags = 2;
inline void PbTank::clear_flags() {
  _impl_.flags_ = 0;
}
inline ::int32_t PbTank::flags() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.flags)
  return _internal_flags();
}
inline void PbTank::set_flags(::int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbTank.flags)
}
inline ::int32_t PbTank::_internal_flags() const {
  return _impl_.flags_;
}
inline void PbTank::_internal_set_flags(::int32_t value) {
  ;
  _impl_.flags_ = value;
}

// int32 slip_time = 3;
inline void PbTank::clear_slip_time() {
  _impl_.slip_time_ = 0;
}
inline ::int32_t PbTank::slip_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.slip_time)
  return _internal_slip_time();
}
inline void PbTank::set_slip_time(::int32_t value) {
  _internal_set_slip_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbTank.slip_time)
}
inline ::int32_t PbTank::_internal_slip_time() const {
  return _impl_.slip_time_;
}
inline void PbTank::_internal_set_slip_time(::int32_t value) {
  ;
  _impl_.slip_time_ = value;
}

// int32 new_direction = 4;
inline void PbTank::clear_new_direction() {
  _impl_.new_direction_ = 0;
}
inline ::int32_t PbTank::new_direction() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.new_direction)
  return _internal_new_direction();
}
inline void PbTank::set_new_direction(::int32_t value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbTank.new_direction)
}
inline ::int32_t PbTank::_internal_new_direction() const {
  return _impl_.new_direction_;
}
inline void PbTank::_internal_set_new_direction(::int32_t value) {
  ;
  _impl_.new_direction_ = value;
}

// uint32 bullet_max_size = 5;
inline void PbTank::clear_bullet_max_size() {
  _impl_.bullet_max_size_ = 0u;
}
inline ::uint32_t PbTank::bullet_max_size() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.bullet_max_size)
  return _internal_bullet_max_size();
}
inline void PbTank::set_bullet_max_size(::uint32_t value) {
  _internal_set_bullet_max_size(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbTank.bullet_max_size)
}
inline ::uint32_t PbTank::_internal_bullet_max_size() const {
  return _impl_.bullet_max_size_;
}
inline void PbTank::_internal_set_bullet_max_size(::uint32_t value) {
  ;
  _impl_.bullet_max_size_ = value;
}

// double default_speed = 6;
inline void PbTank::clear_default_speed() {
  _impl_.default_speed_ = 0;
}
inline double PbTank::default_speed() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbTank.default_speed)
  return _internal_default_speed();
}
inline void PbTank::set_default_speed(double value) {
  _internal_set_default_speed(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbTank.default_speed)
}
inline double PbTank::_internal_default_speed() const {
  return _impl_.default_speed_;
}
inline void PbTank::_internal_set_default_speed(double value) {
  ;
  _impl_.default_speed_ = value;
}

// -------------------------------------------------------------------

// PbPlayer

// .A0S_proto.PbTank tank = 1;
inline bool PbPlayer::has_tank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tank_ != nullptr);
  return value;
}
inline void PbPlayer::clear_tank() {
  if (_impl_.tank_ != nullptr) _impl_.tank_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbTank& PbPlayer::_internal_tank() const {
  const ::A0S_proto::PbTank* p = _impl_.tank_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbTank&>(
      ::A0S_proto::_PbTank_default_instance_);
}
inline const ::A0S_proto::PbTank& PbPlayer::tank() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbPlayer.tank)
  return _internal_tank();
}
inline void PbPlayer::unsafe_arena_set_allocated_tank(
    ::A0S_proto::PbTank* tank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tank_);
  }
  _impl_.tank_ = tank;
  if (tank) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbPlayer.tank)
}
inline ::A0S_proto::PbTank* PbPlayer::release_tank() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbTank* temp = _impl_.tank_;
  _impl_.tank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbTank* PbPlayer::unsafe_arena_release_tank() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbPlayer.tank)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbTank* temp = _impl_.tank_;
  _impl_.tank_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbTank* PbPlayer::_internal_mutable_tank() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tank_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbTank>(GetArenaForAllocation());
    _impl_.tank_ = p;
  }
  return _impl_.tank_;
}
inline ::A0S_proto::PbTank* PbPlayer::mutable_tank() {
  ::A0S_proto::PbTank* _msg = _internal_mutable_tank();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbPlayer.tank)
  return _msg;
}
inline void PbPlayer::set_allocated_tank(::A0S_proto::PbTank* tank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tank_;
  }
  if (tank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tank);
    if (message_arena != submessage_arena) {
      tank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tank_ = tank;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbPlayer.tank)
}

// int32 star_count = 2;
inline void PbPlayer::clear_star_count() {
  _impl_.star_count_ = 0;
}
inline ::int32_t PbPlayer::star_count() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbPlayer.star_count)
  return _internal_star_count();
}
inline void PbPlayer::set_star_count(::int32_t value) {
  _internal_set_star_count(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbPlayer.star_count)
}
inline ::int32_t PbPlayer::_internal_star_count() const {
  return _impl_.star_count_;
}
inline void PbPlayer::_internal_set_star_count(::int32_t value) {
  ;
  _impl_.star_count_ = value;
}

// uint32 fire_time = 3;
inline void PbPlayer::clear_fire_time() {
  _impl_.fire_time_ = 0u;
}
inline ::uint32_t PbPlayer::fire_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbPlayer.fire_time)
  return _internal_fire_time();
}
inline void PbPlayer::set_fire_time(::uint32_t value) {
  _internal_set_fire_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbPlayer.fire_time)
}
inline ::uint32_t PbPlayer::_internal_fire_time() const {
  return _impl_.fire_time_;
}
inline void PbPlayer::_internal_set_fire_time(::uint32_t value) {
  ;
  _impl_.fire_time_ = value;
}

// bool movement = 4;
inline void PbPlayer::clear_movement() {
  _impl_.movement_ = false;
}
inline bool PbPlayer::movement() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbPlayer.movement)
  return _internal_movement();
}
inline void PbPlayer::set_movement(bool value) {
  _internal_set_movement(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbPlayer.movement)
}
inline bool PbPlayer::_internal_movement() const {
  return _impl_.movement_;
}
inline void PbPlayer::_internal_set_movement(bool value) {
  ;
  _impl_.movement_ = value;
}

// bool menu = 5;
inline void PbPlayer::clear_menu() {
  _impl_.menu_ = false;
}
inline bool PbPlayer::menu() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbPlayer.menu)
  return _internal_menu();
}
inline void PbPlayer::set_menu(bool value) {
  _internal_set_menu(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbPlayer.menu)
}
inline bool PbPlayer::_internal_menu() const {
  return _impl_.menu_;
}
inline void PbPlayer::_internal_set_menu(bool value) {
  ;
  _impl_.menu_ = value;
}

// -------------------------------------------------------------------

// PbEnemy

// .A0S_proto.PbTank tank = 1;
inline bool PbEnemy::has_tank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tank_ != nullptr);
  return value;
}
inline void PbEnemy::clear_tank() {
  if (_impl_.tank_ != nullptr) _impl_.tank_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::A0S_proto::PbTank& PbEnemy::_internal_tank() const {
  const ::A0S_proto::PbTank* p = _impl_.tank_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbTank&>(
      ::A0S_proto::_PbTank_default_instance_);
}
inline const ::A0S_proto::PbTank& PbEnemy::tank() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.tank)
  return _internal_tank();
}
inline void PbEnemy::unsafe_arena_set_allocated_tank(
    ::A0S_proto::PbTank* tank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tank_);
  }
  _impl_.tank_ = tank;
  if (tank) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbEnemy.tank)
}
inline ::A0S_proto::PbTank* PbEnemy::release_tank() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbTank* temp = _impl_.tank_;
  _impl_.tank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbTank* PbEnemy::unsafe_arena_release_tank() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbEnemy.tank)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::A0S_proto::PbTank* temp = _impl_.tank_;
  _impl_.tank_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbTank* PbEnemy::_internal_mutable_tank() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tank_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbTank>(GetArenaForAllocation());
    _impl_.tank_ = p;
  }
  return _impl_.tank_;
}
inline ::A0S_proto::PbTank* PbEnemy::mutable_tank() {
  ::A0S_proto::PbTank* _msg = _internal_mutable_tank();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbEnemy.tank)
  return _msg;
}
inline void PbEnemy::set_allocated_tank(::A0S_proto::PbTank* tank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tank_;
  }
  if (tank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tank);
    if (message_arena != submessage_arena) {
      tank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tank_ = tank;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbEnemy.tank)
}

// uint32 direction_time = 2;
inline void PbEnemy::clear_direction_time() {
  _impl_.direction_time_ = 0u;
}
inline ::uint32_t PbEnemy::direction_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.direction_time)
  return _internal_direction_time();
}
inline void PbEnemy::set_direction_time(::uint32_t value) {
  _internal_set_direction_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.direction_time)
}
inline ::uint32_t PbEnemy::_internal_direction_time() const {
  return _impl_.direction_time_;
}
inline void PbEnemy::_internal_set_direction_time(::uint32_t value) {
  ;
  _impl_.direction_time_ = value;
}

// uint32 keep_direction_time = 3;
inline void PbEnemy::clear_keep_direction_time() {
  _impl_.keep_direction_time_ = 0u;
}
inline ::uint32_t PbEnemy::keep_direction_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.keep_direction_time)
  return _internal_keep_direction_time();
}
inline void PbEnemy::set_keep_direction_time(::uint32_t value) {
  _internal_set_keep_direction_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.keep_direction_time)
}
inline ::uint32_t PbEnemy::_internal_keep_direction_time() const {
  return _impl_.keep_direction_time_;
}
inline void PbEnemy::_internal_set_keep_direction_time(::uint32_t value) {
  ;
  _impl_.keep_direction_time_ = value;
}

// uint32 speed_time = 4;
inline void PbEnemy::clear_speed_time() {
  _impl_.speed_time_ = 0u;
}
inline ::uint32_t PbEnemy::speed_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.speed_time)
  return _internal_speed_time();
}
inline void PbEnemy::set_speed_time(::uint32_t value) {
  _internal_set_speed_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.speed_time)
}
inline ::uint32_t PbEnemy::_internal_speed_time() const {
  return _impl_.speed_time_;
}
inline void PbEnemy::_internal_set_speed_time(::uint32_t value) {
  ;
  _impl_.speed_time_ = value;
}

// uint32 try_to_go_time = 5;
inline void PbEnemy::clear_try_to_go_time() {
  _impl_.try_to_go_time_ = 0u;
}
inline ::uint32_t PbEnemy::try_to_go_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.try_to_go_time)
  return _internal_try_to_go_time();
}
inline void PbEnemy::set_try_to_go_time(::uint32_t value) {
  _internal_set_try_to_go_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.try_to_go_time)
}
inline ::uint32_t PbEnemy::_internal_try_to_go_time() const {
  return _impl_.try_to_go_time_;
}
inline void PbEnemy::_internal_set_try_to_go_time(::uint32_t value) {
  ;
  _impl_.try_to_go_time_ = value;
}

// uint32 fire_time = 6;
inline void PbEnemy::clear_fire_time() {
  _impl_.fire_time_ = 0u;
}
inline ::uint32_t PbEnemy::fire_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.fire_time)
  return _internal_fire_time();
}
inline void PbEnemy::set_fire_time(::uint32_t value) {
  _internal_set_fire_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.fire_time)
}
inline ::uint32_t PbEnemy::_internal_fire_time() const {
  return _impl_.fire_time_;
}
inline void PbEnemy::_internal_set_fire_time(::uint32_t value) {
  ;
  _impl_.fire_time_ = value;
}

// uint32 reload_time = 7;
inline void PbEnemy::clear_reload_time() {
  _impl_.reload_time_ = 0u;
}
inline ::uint32_t PbEnemy::reload_time() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.reload_time)
  return _internal_reload_time();
}
inline void PbEnemy::set_reload_time(::uint32_t value) {
  _internal_set_reload_time(value);
  // @@protoc_insertion_point(field_set:A0S_proto.PbEnemy.reload_time)
}
inline ::uint32_t PbEnemy::_internal_reload_time() const {
  return _impl_.reload_time_;
}
inline void PbEnemy::_internal_set_reload_time(::uint32_t value) {
  ;
  _impl_.reload_time_ = value;
}

// .A0S_proto.PbSdlPoint target_position = 8;
inline bool PbEnemy::has_target_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_position_ != nullptr);
  return value;
}
inline void PbEnemy::clear_target_position() {
  if (_impl_.target_position_ != nullptr) _impl_.target_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::A0S_proto::PbSdlPoint& PbEnemy::_internal_target_position() const {
  const ::A0S_proto::PbSdlPoint* p = _impl_.target_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::A0S_proto::PbSdlPoint&>(
      ::A0S_proto::_PbSdlPoint_default_instance_);
}
inline const ::A0S_proto::PbSdlPoint& PbEnemy::target_position() const {
  // @@protoc_insertion_point(field_get:A0S_proto.PbEnemy.target_position)
  return _internal_target_position();
}
inline void PbEnemy::unsafe_arena_set_allocated_target_position(
    ::A0S_proto::PbSdlPoint* target_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_position_);
  }
  _impl_.target_position_ = target_position;
  if (target_position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A0S_proto.PbEnemy.target_position)
}
inline ::A0S_proto::PbSdlPoint* PbEnemy::release_target_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::A0S_proto::PbSdlPoint* temp = _impl_.target_position_;
  _impl_.target_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A0S_proto::PbSdlPoint* PbEnemy::unsafe_arena_release_target_position() {
  // @@protoc_insertion_point(field_release:A0S_proto.PbEnemy.target_position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::A0S_proto::PbSdlPoint* temp = _impl_.target_position_;
  _impl_.target_position_ = nullptr;
  return temp;
}
inline ::A0S_proto::PbSdlPoint* PbEnemy::_internal_mutable_target_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.target_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::A0S_proto::PbSdlPoint>(GetArenaForAllocation());
    _impl_.target_position_ = p;
  }
  return _impl_.target_position_;
}
inline ::A0S_proto::PbSdlPoint* PbEnemy::mutable_target_position() {
  ::A0S_proto::PbSdlPoint* _msg = _internal_mutable_target_position();
  // @@protoc_insertion_point(field_mutable:A0S_proto.PbEnemy.target_position)
  return _msg;
}
inline void PbEnemy::set_allocated_target_position(::A0S_proto::PbSdlPoint* target_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_position_;
  }
  if (target_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_position);
    if (message_arena != submessage_arena) {
      target_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.target_position_ = target_position;
  // @@protoc_insertion_point(field_set_allocated:A0S_proto.PbEnemy.target_position)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace A0S_proto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::A0S_proto::PbSpriteType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::A0S_proto::PbSpriteType>() {
  return ::A0S_proto::PbSpriteType_descriptor();
}
template <>
struct is_proto_enum<::A0S_proto::PbDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::A0S_proto::PbDirection>() {
  return ::A0S_proto::PbDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_acme_2eproto_2epb_2eh
