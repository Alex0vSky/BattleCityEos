// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllInOne.proto

#include "AllInOne.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace A0S_proto {
template <typename>
PROTOBUF_CONSTEXPR SDL_Rect::SDL_Rect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_.w_)*/ 0

  , /*decltype(_impl_.h_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDL_RectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDL_RectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDL_RectDefaultTypeInternal() {}
  union {
    SDL_Rect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDL_RectDefaultTypeInternal _SDL_Rect_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Object::Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collision_rect_)*/nullptr
  , /*decltype(_impl_.dest_rect_)*/nullptr
  , /*decltype(_impl_.src_rect_)*/nullptr
  , /*decltype(_impl_.frame_display_time_)*/ 0u

  , /*decltype(_impl_.current_frame_)*/ 0

  , /*decltype(_impl_.to_erase_)*/ false

  , /*decltype(_impl_.type_)*/ 0u

  , /*decltype(_impl_.pos_x_)*/ 0

  , /*decltype(_impl_.pos_y_)*/ 0
} {}
struct ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDefaultTypeInternal _Object_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Tank::Tank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.flags_)*/ 0

  , /*decltype(_impl_.slip_time_)*/ 0

  , /*decltype(_impl_.new_direction_)*/ 0

  , /*decltype(_impl_.bullet_max_size_)*/ 0u

  , /*decltype(_impl_.default_speed_)*/ 0
} {}
struct TankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TankDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TankDefaultTypeInternal() {}
  union {
    Tank _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TankDefaultTypeInternal _Tank_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tank_)*/nullptr
  , /*decltype(_impl_.star_count_)*/ 0

  , /*decltype(_impl_.fire_time_)*/ 0

  , /*decltype(_impl_.movement_)*/ false

  , /*decltype(_impl_.menu_)*/ false
} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SDL_Point::SDL_Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDL_PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDL_PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDL_PointDefaultTypeInternal() {}
  union {
    SDL_Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDL_PointDefaultTypeInternal _SDL_Point_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Enemy::Enemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tank_)*/nullptr
  , /*decltype(_impl_.target_position_)*/nullptr
  , /*decltype(_impl_.direction_time_)*/ 0u

  , /*decltype(_impl_.keep_direction_time_)*/ 0u

  , /*decltype(_impl_.speed_time_)*/ 0u

  , /*decltype(_impl_.try_to_go_time_)*/ 0u

  , /*decltype(_impl_.fire_time_)*/ 0u

  , /*decltype(_impl_.reload_time_)*/ 0u
} {}
struct EnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyDefaultTypeInternal() {}
  union {
    Enemy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyDefaultTypeInternal _Enemy_default_instance_;
}  // namespace A0S_proto
static ::_pb::Metadata file_level_metadata_AllInOne_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_AllInOne_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_AllInOne_2eproto = nullptr;
const ::uint32_t TableStruct_AllInOne_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Rect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Rect, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Rect, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Rect, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Rect, _impl_.h_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.frame_display_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.current_frame_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.to_erase_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.collision_rect_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.dest_rect_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.src_rect_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.pos_x_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Object, _impl_.pos_y_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.slip_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.new_direction_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.bullet_max_size_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Tank, _impl_.default_speed_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_.tank_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_.star_count_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_.fire_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_.movement_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Player, _impl_.menu_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Point, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Point, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::SDL_Point, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.tank_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.direction_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.keep_direction_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.speed_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.try_to_go_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.fire_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.reload_time_),
    PROTOBUF_FIELD_OFFSET(::A0S_proto::Enemy, _impl_.target_position_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::A0S_proto::SDL_Rect)},
        { 12, 29, -1, sizeof(::A0S_proto::Object)},
        { 38, 52, -1, sizeof(::A0S_proto::Tank)},
        { 58, 71, -1, sizeof(::A0S_proto::Player)},
        { 76, -1, -1, sizeof(::A0S_proto::SDL_Point)},
        { 86, 102, -1, sizeof(::A0S_proto::Enemy)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::A0S_proto::_SDL_Rect_default_instance_._instance,
    &::A0S_proto::_Object_default_instance_._instance,
    &::A0S_proto::_Tank_default_instance_._instance,
    &::A0S_proto::_Player_default_instance_._instance,
    &::A0S_proto::_SDL_Point_default_instance_._instance,
    &::A0S_proto::_Enemy_default_instance_._instance,
};
const char descriptor_table_protodef_AllInOne_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016AllInOne.proto\022\tA0S_proto\"6\n\010SDL_Rect\022"
    "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\t\n\001h\030\005 "
    "\001(\005\"\365\001\n\006Object\022\032\n\022frame_display_time\030\001 \001"
    "(\r\022\025\n\rcurrent_frame\030\002 \001(\005\022\020\n\010to_erase\030\003 "
    "\001(\010\022+\n\016collision_rect\030\004 \001(\0132\023.A0S_proto."
    "SDL_Rect\022&\n\tdest_rect\030\005 \001(\0132\023.A0S_proto."
    "SDL_Rect\022%\n\010src_rect\030\006 \001(\0132\023.A0S_proto.S"
    "DL_Rect\022\014\n\004type\030\007 \001(\r\022\r\n\005pos_x\030\010 \001(\001\022\r\n\005"
    "pos_y\030\t \001(\001\"\222\001\n\004Tank\022!\n\006object\030\001 \001(\0132\021.A"
    "0S_proto.Object\022\r\n\005flags\030\002 \001(\005\022\021\n\tslip_t"
    "ime\030\003 \001(\005\022\025\n\rnew_direction\030\004 \001(\005\022\027\n\017bull"
    "et_max_size\030\005 \001(\r\022\025\n\rdefault_speed\030\006 \001(\001"
    "\"n\n\006Player\022\035\n\004tank\030\001 \001(\0132\017.A0S_proto.Tan"
    "k\022\022\n\nstar_count\030\002 \001(\005\022\021\n\tfire_time\030\003 \001(\005"
    "\022\020\n\010movement\030\004 \001(\010\022\014\n\004menu\030\005 \001(\010\"!\n\tSDL_"
    "Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\336\001\n\005Enemy\022\035\n"
    "\004tank\030\001 \001(\0132\017.A0S_proto.Tank\022\026\n\016directio"
    "n_time\030\002 \001(\r\022\033\n\023keep_direction_time\030\003 \001("
    "\r\022\022\n\nspeed_time\030\004 \001(\r\022\026\n\016try_to_go_time\030"
    "\005 \001(\r\022\021\n\tfire_time\030\006 \001(\r\022\023\n\013reload_time\030"
    "\007 \001(\r\022-\n\017target_position\030\010 \001(\0132\024.A0S_pro"
    "to.SDL_Pointb\006proto3"
};
static ::absl::once_flag descriptor_table_AllInOne_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AllInOne_2eproto = {
    false,
    false,
    860,
    descriptor_table_protodef_AllInOne_2eproto,
    "AllInOne.proto",
    &descriptor_table_AllInOne_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_AllInOne_2eproto::offsets,
    file_level_metadata_AllInOne_2eproto,
    file_level_enum_descriptors_AllInOne_2eproto,
    file_level_service_descriptors_AllInOne_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AllInOne_2eproto_getter() {
  return &descriptor_table_AllInOne_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AllInOne_2eproto(&descriptor_table_AllInOne_2eproto);
namespace A0S_proto {
// ===================================================================

class SDL_Rect::_Internal {
 public:
};

SDL_Rect::SDL_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.SDL_Rect)
}
SDL_Rect::SDL_Rect(const SDL_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:A0S_proto.SDL_Rect)
}

inline void SDL_Rect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , decltype(_impl_.w_) { 0 }

    , decltype(_impl_.h_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SDL_Rect::~SDL_Rect() {
  // @@protoc_insertion_point(destructor:A0S_proto.SDL_Rect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDL_Rect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SDL_Rect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDL_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.SDL_Rect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.h_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDL_Rect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SDL_Rect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.SDL_Rect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_y(), target);
  }

  // int32 w = 3;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_w(), target);
  }

  // int32 h = 5;
  if (this->_internal_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.SDL_Rect)
  return target;
}

::size_t SDL_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.SDL_Rect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  // int32 w = 3;
  if (this->_internal_w() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_w());
  }

  // int32 h = 5;
  if (this->_internal_h() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_h());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDL_Rect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDL_Rect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDL_Rect::GetClassData() const { return &_class_data_; }


void SDL_Rect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDL_Rect*>(&to_msg);
  auto& from = static_cast<const SDL_Rect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.SDL_Rect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_w() != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  if (from._internal_h() != 0) {
    _this->_internal_set_h(from._internal_h());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDL_Rect::CopyFrom(const SDL_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.SDL_Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDL_Rect::IsInitialized() const {
  return true;
}

void SDL_Rect::InternalSwap(SDL_Rect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDL_Rect, _impl_.h_)
      + sizeof(SDL_Rect::_impl_.h_)
      - PROTOBUF_FIELD_OFFSET(SDL_Rect, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDL_Rect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[0]);
}
// ===================================================================

class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Object, _impl_._has_bits_);
  static const ::A0S_proto::SDL_Rect& collision_rect(const Object* msg);
  static void set_has_collision_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::A0S_proto::SDL_Rect& dest_rect(const Object* msg);
  static void set_has_dest_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::A0S_proto::SDL_Rect& src_rect(const Object* msg);
  static void set_has_src_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::A0S_proto::SDL_Rect&
Object::_Internal::collision_rect(const Object* msg) {
  return *msg->_impl_.collision_rect_;
}
const ::A0S_proto::SDL_Rect&
Object::_Internal::dest_rect(const Object* msg) {
  return *msg->_impl_.dest_rect_;
}
const ::A0S_proto::SDL_Rect&
Object::_Internal::src_rect(const Object* msg) {
  return *msg->_impl_.src_rect_;
}
Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collision_rect_){nullptr}
    , decltype(_impl_.dest_rect_){nullptr}
    , decltype(_impl_.src_rect_){nullptr}
    , decltype(_impl_.frame_display_time_) {}

    , decltype(_impl_.current_frame_) {}

    , decltype(_impl_.to_erase_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.pos_x_) {}

    , decltype(_impl_.pos_y_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.collision_rect_ = new ::A0S_proto::SDL_Rect(*from._impl_.collision_rect_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dest_rect_ = new ::A0S_proto::SDL_Rect(*from._impl_.dest_rect_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.src_rect_ = new ::A0S_proto::SDL_Rect(*from._impl_.src_rect_);
  }
  ::memcpy(&_impl_.frame_display_time_, &from._impl_.frame_display_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pos_y_) -
    reinterpret_cast<char*>(&_impl_.frame_display_time_)) + sizeof(_impl_.pos_y_));
  // @@protoc_insertion_point(copy_constructor:A0S_proto.Object)
}

inline void Object::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collision_rect_){nullptr}
    , decltype(_impl_.dest_rect_){nullptr}
    , decltype(_impl_.src_rect_){nullptr}
    , decltype(_impl_.frame_display_time_) { 0u }

    , decltype(_impl_.current_frame_) { 0 }

    , decltype(_impl_.to_erase_) { false }

    , decltype(_impl_.type_) { 0u }

    , decltype(_impl_.pos_x_) { 0 }

    , decltype(_impl_.pos_y_) { 0 }

  };
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:A0S_proto.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Object::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.collision_rect_;
  if (this != internal_default_instance()) delete _impl_.dest_rect_;
  if (this != internal_default_instance()) delete _impl_.src_rect_;
}

void Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.Object)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.collision_rect_ != nullptr);
      _impl_.collision_rect_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dest_rect_ != nullptr);
      _impl_.dest_rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.src_rect_ != nullptr);
      _impl_.src_rect_->Clear();
    }
  }
  ::memset(&_impl_.frame_display_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pos_y_) -
      reinterpret_cast<char*>(&_impl_.frame_display_time_)) + sizeof(_impl_.pos_y_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 frame_display_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.frame_display_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.current_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool to_erase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.to_erase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .A0S_proto.SDL_Rect collision_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collision_rect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .A0S_proto.SDL_Rect dest_rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_rect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .A0S_proto.SDL_Rect src_rect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_rect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double pos_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double pos_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 73)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Object::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.Object)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_display_time = 1;
  if (this->_internal_frame_display_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_frame_display_time(), target);
  }

  // int32 current_frame = 2;
  if (this->_internal_current_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_current_frame(), target);
  }

  // bool to_erase = 3;
  if (this->_internal_to_erase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_to_erase(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .A0S_proto.SDL_Rect collision_rect = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::collision_rect(this),
        _Internal::collision_rect(this).GetCachedSize(), target, stream);
  }

  // .A0S_proto.SDL_Rect dest_rect = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dest_rect(this),
        _Internal::dest_rect(this).GetCachedSize(), target, stream);
  }

  // .A0S_proto.SDL_Rect src_rect = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::src_rect(this),
        _Internal::src_rect(this).GetCachedSize(), target, stream);
  }

  // uint32 type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_type(), target);
  }

  // double pos_x = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_x = this->_internal_pos_x();
  ::uint64_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_pos_x(), target);
  }

  // double pos_y = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_y = this->_internal_pos_y();
  ::uint64_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.Object)
  return target;
}

::size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.Object)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .A0S_proto.SDL_Rect collision_rect = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collision_rect_);
    }

    // .A0S_proto.SDL_Rect dest_rect = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dest_rect_);
    }

    // .A0S_proto.SDL_Rect src_rect = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.src_rect_);
    }

  }
  // uint32 frame_display_time = 1;
  if (this->_internal_frame_display_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_frame_display_time());
  }

  // int32 current_frame = 2;
  if (this->_internal_current_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_frame());
  }

  // bool to_erase = 3;
  if (this->_internal_to_erase() != 0) {
    total_size += 2;
  }

  // uint32 type = 7;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type());
  }

  // double pos_x = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_x = this->_internal_pos_x();
  ::uint64_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 9;
  }

  // double pos_y = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_y = this->_internal_pos_y();
  ::uint64_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Object::GetClassData() const { return &_class_data_; }


void Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Object*>(&to_msg);
  auto& from = static_cast<const Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.Object)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_collision_rect()->::A0S_proto::SDL_Rect::MergeFrom(
          from._internal_collision_rect());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dest_rect()->::A0S_proto::SDL_Rect::MergeFrom(
          from._internal_dest_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_src_rect()->::A0S_proto::SDL_Rect::MergeFrom(
          from._internal_src_rect());
    }
  }
  if (from._internal_frame_display_time() != 0) {
    _this->_internal_set_frame_display_time(from._internal_frame_display_time());
  }
  if (from._internal_current_frame() != 0) {
    _this->_internal_set_current_frame(from._internal_current_frame());
  }
  if (from._internal_to_erase() != 0) {
    _this->_internal_set_to_erase(from._internal_to_erase());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_x = from._internal_pos_x();
  ::uint64_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_pos_y = from._internal_pos_y();
  ::uint64_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, _impl_.pos_y_)
      + sizeof(Object::_impl_.pos_y_)
      - PROTOBUF_FIELD_OFFSET(Object, _impl_.collision_rect_)>(
          reinterpret_cast<char*>(&_impl_.collision_rect_),
          reinterpret_cast<char*>(&other->_impl_.collision_rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[1]);
}
// ===================================================================

class Tank::_Internal {
 public:
  using HasBits = decltype(std::declval<Tank>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Tank, _impl_._has_bits_);
  static const ::A0S_proto::Object& object(const Tank* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::A0S_proto::Object&
Tank::_Internal::object(const Tank* msg) {
  return *msg->_impl_.object_;
}
Tank::Tank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.Tank)
}
Tank::Tank(const Tank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.flags_) {}

    , decltype(_impl_.slip_time_) {}

    , decltype(_impl_.new_direction_) {}

    , decltype(_impl_.bullet_max_size_) {}

    , decltype(_impl_.default_speed_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.object_ = new ::A0S_proto::Object(*from._impl_.object_);
  }
  ::memcpy(&_impl_.flags_, &from._impl_.flags_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.default_speed_) -
    reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.default_speed_));
  // @@protoc_insertion_point(copy_constructor:A0S_proto.Tank)
}

inline void Tank::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.flags_) { 0 }

    , decltype(_impl_.slip_time_) { 0 }

    , decltype(_impl_.new_direction_) { 0 }

    , decltype(_impl_.bullet_max_size_) { 0u }

    , decltype(_impl_.default_speed_) { 0 }

  };
}

Tank::~Tank() {
  // @@protoc_insertion_point(destructor:A0S_proto.Tank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tank::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void Tank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tank::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.Tank)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.default_speed_) -
      reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.default_speed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .A0S_proto.Object object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 slip_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.slip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 new_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 bullet_max_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.bullet_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double default_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _impl_.default_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Tank::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.Tank)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .A0S_proto.Object object = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // int32 flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // int32 slip_time = 3;
  if (this->_internal_slip_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_slip_time(), target);
  }

  // int32 new_direction = 4;
  if (this->_internal_new_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_new_direction(), target);
  }

  // uint32 bullet_max_size = 5;
  if (this->_internal_bullet_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_bullet_max_size(), target);
  }

  // double default_speed = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_default_speed = this->_internal_default_speed();
  ::uint64_t raw_default_speed;
  memcpy(&raw_default_speed, &tmp_default_speed, sizeof(tmp_default_speed));
  if (raw_default_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_default_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.Tank)
  return target;
}

::size_t Tank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.Tank)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .A0S_proto.Object object = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  // int32 flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_flags());
  }

  // int32 slip_time = 3;
  if (this->_internal_slip_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_slip_time());
  }

  // int32 new_direction = 4;
  if (this->_internal_new_direction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_new_direction());
  }

  // uint32 bullet_max_size = 5;
  if (this->_internal_bullet_max_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bullet_max_size());
  }

  // double default_speed = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_default_speed = this->_internal_default_speed();
  ::uint64_t raw_default_speed;
  memcpy(&raw_default_speed, &tmp_default_speed, sizeof(tmp_default_speed));
  if (raw_default_speed != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tank::GetClassData() const { return &_class_data_; }


void Tank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tank*>(&to_msg);
  auto& from = static_cast<const Tank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.Tank)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_object()->::A0S_proto::Object::MergeFrom(
        from._internal_object());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_slip_time() != 0) {
    _this->_internal_set_slip_time(from._internal_slip_time());
  }
  if (from._internal_new_direction() != 0) {
    _this->_internal_set_new_direction(from._internal_new_direction());
  }
  if (from._internal_bullet_max_size() != 0) {
    _this->_internal_set_bullet_max_size(from._internal_bullet_max_size());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_default_speed = from._internal_default_speed();
  ::uint64_t raw_default_speed;
  memcpy(&raw_default_speed, &tmp_default_speed, sizeof(tmp_default_speed));
  if (raw_default_speed != 0) {
    _this->_internal_set_default_speed(from._internal_default_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tank::CopyFrom(const Tank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.Tank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tank::IsInitialized() const {
  return true;
}

void Tank::InternalSwap(Tank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tank, _impl_.default_speed_)
      + sizeof(Tank::_impl_.default_speed_)
      - PROTOBUF_FIELD_OFFSET(Tank, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[2]);
}
// ===================================================================

class Player::_Internal {
 public:
  using HasBits = decltype(std::declval<Player>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Player, _impl_._has_bits_);
  static const ::A0S_proto::Tank& tank(const Player* msg);
  static void set_has_tank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::A0S_proto::Tank&
Player::_Internal::tank(const Player* msg) {
  return *msg->_impl_.tank_;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tank_){nullptr}
    , decltype(_impl_.star_count_) {}

    , decltype(_impl_.fire_time_) {}

    , decltype(_impl_.movement_) {}

    , decltype(_impl_.menu_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tank_ = new ::A0S_proto::Tank(*from._impl_.tank_);
  }
  ::memcpy(&_impl_.star_count_, &from._impl_.star_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.menu_) -
    reinterpret_cast<char*>(&_impl_.star_count_)) + sizeof(_impl_.menu_));
  // @@protoc_insertion_point(copy_constructor:A0S_proto.Player)
}

inline void Player::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tank_){nullptr}
    , decltype(_impl_.star_count_) { 0 }

    , decltype(_impl_.fire_time_) { 0 }

    , decltype(_impl_.movement_) { false }

    , decltype(_impl_.menu_) { false }

  };
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:A0S_proto.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tank_;
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.Player)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tank_ != nullptr);
    _impl_.tank_->Clear();
  }
  ::memset(&_impl_.star_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.menu_) -
      reinterpret_cast<char*>(&_impl_.star_count_)) + sizeof(_impl_.menu_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .A0S_proto.Tank tank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tank(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 star_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 fire_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.fire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool movement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.movement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool menu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.menu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Player::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.Player)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .A0S_proto.Tank tank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tank(this),
        _Internal::tank(this).GetCachedSize(), target, stream);
  }

  // int32 star_count = 2;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_star_count(), target);
  }

  // int32 fire_time = 3;
  if (this->_internal_fire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_fire_time(), target);
  }

  // bool movement = 4;
  if (this->_internal_movement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_movement(), target);
  }

  // bool menu = 5;
  if (this->_internal_menu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_menu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.Player)
  return target;
}

::size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.Player)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .A0S_proto.Tank tank = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tank_);
  }

  // int32 star_count = 2;
  if (this->_internal_star_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_star_count());
  }

  // int32 fire_time = 3;
  if (this->_internal_fire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fire_time());
  }

  // bool movement = 4;
  if (this->_internal_movement() != 0) {
    total_size += 2;
  }

  // bool menu = 5;
  if (this->_internal_menu() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.Player)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_tank()->::A0S_proto::Tank::MergeFrom(
        from._internal_tank());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  if (from._internal_fire_time() != 0) {
    _this->_internal_set_fire_time(from._internal_fire_time());
  }
  if (from._internal_movement() != 0) {
    _this->_internal_set_movement(from._internal_movement());
  }
  if (from._internal_menu() != 0) {
    _this->_internal_set_menu(from._internal_menu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.menu_)
      + sizeof(Player::_impl_.menu_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.tank_)>(
          reinterpret_cast<char*>(&_impl_.tank_),
          reinterpret_cast<char*>(&other->_impl_.tank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[3]);
}
// ===================================================================

class SDL_Point::_Internal {
 public:
};

SDL_Point::SDL_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.SDL_Point)
}
SDL_Point::SDL_Point(const SDL_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:A0S_proto.SDL_Point)
}

inline void SDL_Point::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SDL_Point::~SDL_Point() {
  // @@protoc_insertion_point(destructor:A0S_proto.SDL_Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDL_Point::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SDL_Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDL_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.SDL_Point)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDL_Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SDL_Point::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.SDL_Point)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.SDL_Point)
  return target;
}

::size_t SDL_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.SDL_Point)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDL_Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDL_Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDL_Point::GetClassData() const { return &_class_data_; }


void SDL_Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDL_Point*>(&to_msg);
  auto& from = static_cast<const SDL_Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.SDL_Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDL_Point::CopyFrom(const SDL_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.SDL_Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDL_Point::IsInitialized() const {
  return true;
}

void SDL_Point::InternalSwap(SDL_Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDL_Point, _impl_.y_)
      + sizeof(SDL_Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(SDL_Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDL_Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[4]);
}
// ===================================================================

class Enemy::_Internal {
 public:
  using HasBits = decltype(std::declval<Enemy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Enemy, _impl_._has_bits_);
  static const ::A0S_proto::Tank& tank(const Enemy* msg);
  static void set_has_tank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::A0S_proto::SDL_Point& target_position(const Enemy* msg);
  static void set_has_target_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::A0S_proto::Tank&
Enemy::_Internal::tank(const Enemy* msg) {
  return *msg->_impl_.tank_;
}
const ::A0S_proto::SDL_Point&
Enemy::_Internal::target_position(const Enemy* msg) {
  return *msg->_impl_.target_position_;
}
Enemy::Enemy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:A0S_proto.Enemy)
}
Enemy::Enemy(const Enemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Enemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tank_){nullptr}
    , decltype(_impl_.target_position_){nullptr}
    , decltype(_impl_.direction_time_) {}

    , decltype(_impl_.keep_direction_time_) {}

    , decltype(_impl_.speed_time_) {}

    , decltype(_impl_.try_to_go_time_) {}

    , decltype(_impl_.fire_time_) {}

    , decltype(_impl_.reload_time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tank_ = new ::A0S_proto::Tank(*from._impl_.tank_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.target_position_ = new ::A0S_proto::SDL_Point(*from._impl_.target_position_);
  }
  ::memcpy(&_impl_.direction_time_, &from._impl_.direction_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.reload_time_) -
    reinterpret_cast<char*>(&_impl_.direction_time_)) + sizeof(_impl_.reload_time_));
  // @@protoc_insertion_point(copy_constructor:A0S_proto.Enemy)
}

inline void Enemy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tank_){nullptr}
    , decltype(_impl_.target_position_){nullptr}
    , decltype(_impl_.direction_time_) { 0u }

    , decltype(_impl_.keep_direction_time_) { 0u }

    , decltype(_impl_.speed_time_) { 0u }

    , decltype(_impl_.try_to_go_time_) { 0u }

    , decltype(_impl_.fire_time_) { 0u }

    , decltype(_impl_.reload_time_) { 0u }

  };
}

Enemy::~Enemy() {
  // @@protoc_insertion_point(destructor:A0S_proto.Enemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enemy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tank_;
  if (this != internal_default_instance()) delete _impl_.target_position_;
}

void Enemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enemy::Clear() {
// @@protoc_insertion_point(message_clear_start:A0S_proto.Enemy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.tank_ != nullptr);
      _impl_.tank_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.target_position_ != nullptr);
      _impl_.target_position_->Clear();
    }
  }
  ::memset(&_impl_.direction_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reload_time_) -
      reinterpret_cast<char*>(&_impl_.direction_time_)) + sizeof(_impl_.reload_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .A0S_proto.Tank tank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tank(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 direction_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.direction_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 keep_direction_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.keep_direction_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 speed_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.speed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 try_to_go_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.try_to_go_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 fire_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.fire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 reload_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.reload_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .A0S_proto.SDL_Point target_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Enemy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A0S_proto.Enemy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .A0S_proto.Tank tank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tank(this),
        _Internal::tank(this).GetCachedSize(), target, stream);
  }

  // uint32 direction_time = 2;
  if (this->_internal_direction_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_direction_time(), target);
  }

  // uint32 keep_direction_time = 3;
  if (this->_internal_keep_direction_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_keep_direction_time(), target);
  }

  // uint32 speed_time = 4;
  if (this->_internal_speed_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_speed_time(), target);
  }

  // uint32 try_to_go_time = 5;
  if (this->_internal_try_to_go_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_try_to_go_time(), target);
  }

  // uint32 fire_time = 6;
  if (this->_internal_fire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_fire_time(), target);
  }

  // uint32 reload_time = 7;
  if (this->_internal_reload_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_reload_time(), target);
  }

  // .A0S_proto.SDL_Point target_position = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::target_position(this),
        _Internal::target_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A0S_proto.Enemy)
  return target;
}

::size_t Enemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A0S_proto.Enemy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .A0S_proto.Tank tank = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tank_);
    }

    // .A0S_proto.SDL_Point target_position = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_position_);
    }

  }
  // uint32 direction_time = 2;
  if (this->_internal_direction_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_direction_time());
  }

  // uint32 keep_direction_time = 3;
  if (this->_internal_keep_direction_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_keep_direction_time());
  }

  // uint32 speed_time = 4;
  if (this->_internal_speed_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_speed_time());
  }

  // uint32 try_to_go_time = 5;
  if (this->_internal_try_to_go_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_try_to_go_time());
  }

  // uint32 fire_time = 6;
  if (this->_internal_fire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_fire_time());
  }

  // uint32 reload_time = 7;
  if (this->_internal_reload_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_reload_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Enemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enemy::GetClassData() const { return &_class_data_; }


void Enemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Enemy*>(&to_msg);
  auto& from = static_cast<const Enemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:A0S_proto.Enemy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tank()->::A0S_proto::Tank::MergeFrom(
          from._internal_tank());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_position()->::A0S_proto::SDL_Point::MergeFrom(
          from._internal_target_position());
    }
  }
  if (from._internal_direction_time() != 0) {
    _this->_internal_set_direction_time(from._internal_direction_time());
  }
  if (from._internal_keep_direction_time() != 0) {
    _this->_internal_set_keep_direction_time(from._internal_keep_direction_time());
  }
  if (from._internal_speed_time() != 0) {
    _this->_internal_set_speed_time(from._internal_speed_time());
  }
  if (from._internal_try_to_go_time() != 0) {
    _this->_internal_set_try_to_go_time(from._internal_try_to_go_time());
  }
  if (from._internal_fire_time() != 0) {
    _this->_internal_set_fire_time(from._internal_fire_time());
  }
  if (from._internal_reload_time() != 0) {
    _this->_internal_set_reload_time(from._internal_reload_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enemy::CopyFrom(const Enemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A0S_proto.Enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enemy::IsInitialized() const {
  return true;
}

void Enemy::InternalSwap(Enemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Enemy, _impl_.reload_time_)
      + sizeof(Enemy::_impl_.reload_time_)
      - PROTOBUF_FIELD_OFFSET(Enemy, _impl_.tank_)>(
          reinterpret_cast<char*>(&_impl_.tank_),
          reinterpret_cast<char*>(&other->_impl_.tank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Enemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AllInOne_2eproto_getter, &descriptor_table_AllInOne_2eproto_once,
      file_level_metadata_AllInOne_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace A0S_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::A0S_proto::SDL_Rect*
Arena::CreateMaybeMessage< ::A0S_proto::SDL_Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::SDL_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::A0S_proto::Object*
Arena::CreateMaybeMessage< ::A0S_proto::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::A0S_proto::Tank*
Arena::CreateMaybeMessage< ::A0S_proto::Tank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::Tank >(arena);
}
template<> PROTOBUF_NOINLINE ::A0S_proto::Player*
Arena::CreateMaybeMessage< ::A0S_proto::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::A0S_proto::SDL_Point*
Arena::CreateMaybeMessage< ::A0S_proto::SDL_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::SDL_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::A0S_proto::Enemy*
Arena::CreateMaybeMessage< ::A0S_proto::Enemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A0S_proto::Enemy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
